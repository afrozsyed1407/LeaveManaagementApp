package model.Entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 14 18:52:29 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EmployeeId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmployeeId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setEmployeeId((Number)value);
            }
        }
        ,
        EmployeeName {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmployeeName();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setEmployeeName((String)value);
            }
        }
        ,
        Role {
            public Object get(EmployeesEOImpl obj) {
                return obj.getRole();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setRole((String)value);
            }
        }
        ,
        Password {
            public Object get(EmployeesEOImpl obj) {
                return obj.getPassword();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setPassword((String)value);
            }
        }
        ,
        Leavesavailable {
            public Object get(EmployeesEOImpl obj) {
                return obj.getLeavesavailable();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setLeavesavailable((Number)value);
            }
        }
        ,
        LeavesEO {
            public Object get(EmployeesEOImpl obj) {
                return obj.getLeavesEO();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LeavesEO1 {
            public Object get(EmployeesEOImpl obj) {
                return obj.getLeavesEO1();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EmployeesEOImpl object);

        public abstract void put(EmployeesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int EMPLOYEENAME = AttributesEnum.EmployeeName.index();
    public static final int ROLE = AttributesEnum.Role.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int LEAVESAVAILABLE = AttributesEnum.Leavesavailable.index();
    public static final int LEAVESEO = AttributesEnum.LeavesEO.index();
    public static final int LEAVESEO1 = AttributesEnum.LeavesEO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.Entities.EmployeesEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the EmployeeId
     */
    public Number getEmployeeId() {
        return (Number)getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(Number value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for EmployeeName, using the alias name EmployeeName.
     * @return the EmployeeName
     */
    public String getEmployeeName() {
        return (String)getAttributeInternal(EMPLOYEENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeName.
     * @param value value to set the EmployeeName
     */
    public void setEmployeeName(String value) {
        setAttributeInternal(EMPLOYEENAME, value);
    }

    /**
     * Gets the attribute value for Role, using the alias name Role.
     * @return the Role
     */
    public String getRole() {
        return (String)getAttributeInternal(ROLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Role.
     * @param value value to set the Role
     */
    public void setRole(String value) {
        setAttributeInternal(ROLE, value);
    }

    /**
     * Gets the attribute value for Password, using the alias name Password.
     * @return the Password
     */
    public String getPassword() {
        return (String)getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Password.
     * @param value value to set the Password
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for Leavesavailable, using the alias name Leavesavailable.
     * @return the Leavesavailable
     */
    public Number getLeavesavailable() {
        return (Number)getAttributeInternal(LEAVESAVAILABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Leavesavailable.
     * @param value value to set the Leavesavailable
     */
    public void setLeavesavailable(Number value) {
        setAttributeInternal(LEAVESAVAILABLE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getLeavesEO() {
        return (RowIterator)getAttributeInternal(LEAVESEO);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getLeavesEO1() {
        return (RowIterator)getAttributeInternal(LEAVESEO1);
    }


    /**
     * @param employeeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number employeeId) {
        return new Key(new Object[]{employeeId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl se = new SequenceImpl("EMPLOYEES_SEQ",getDBTransaction());
        this.setEmployeeId(se.getSequenceNumber());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
