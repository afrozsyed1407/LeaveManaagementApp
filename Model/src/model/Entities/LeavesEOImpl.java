package model.Entities;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 14 19:00:10 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LeavesEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        LeaveId {
            public Object get(LeavesEOImpl obj) {
                return obj.getLeaveId();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setLeaveId((Number)value);
            }
        }
        ,
        EmployeeId {
            public Object get(LeavesEOImpl obj) {
                return obj.getEmployeeId();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setEmployeeId((Number)value);
            }
        }
        ,
        LeaveType {
            public Object get(LeavesEOImpl obj) {
                return obj.getLeaveType();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setLeaveType((String)value);
            }
        }
        ,
        FromDate {
            public Object get(LeavesEOImpl obj) {
                return obj.getFromDate();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setFromDate((Date)value);
            }
        }
        ,
        ToDate {
            public Object get(LeavesEOImpl obj) {
                return obj.getToDate();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setToDate((Date)value);
            }
        }
        ,
        Reason {
            public Object get(LeavesEOImpl obj) {
                return obj.getReason();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setReason((String)value);
            }
        }
        ,
        Status {
            public Object get(LeavesEOImpl obj) {
                return obj.getStatus();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        AppliedDate {
            public Object get(LeavesEOImpl obj) {
                return obj.getAppliedDate();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setAppliedDate((Date)value);
            }
        }
        ,
        EmployeesEO {
            public Object get(LeavesEOImpl obj) {
                return obj.getEmployeesEO();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setEmployeesEO((EmployeesEOImpl)value);
            }
        }
        ,
        EmployeesEO1 {
            public Object get(LeavesEOImpl obj) {
                return obj.getEmployeesEO1();
            }

            public void put(LeavesEOImpl obj, Object value) {
                obj.setEmployeesEO1((EmployeesEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(LeavesEOImpl object);

        public abstract void put(LeavesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int LEAVEID = AttributesEnum.LeaveId.index();
    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int LEAVETYPE = AttributesEnum.LeaveType.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int REASON = AttributesEnum.Reason.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int APPLIEDDATE = AttributesEnum.AppliedDate.index();
    public static final int EMPLOYEESEO = AttributesEnum.EmployeesEO.index();
    public static final int EMPLOYEESEO1 = AttributesEnum.EmployeesEO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LeavesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.Entities.LeavesEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for LeaveId, using the alias name LeaveId.
     * @return the LeaveId
     */
    public Number getLeaveId() {
        return (Number)getAttributeInternal(LEAVEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LeaveId.
     * @param value value to set the LeaveId
     */
    public void setLeaveId(Number value) {
        setAttributeInternal(LEAVEID, value);
    }

    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the EmployeeId
     */
    public Number getEmployeeId() {
        return (Number)getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(Number value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for LeaveType, using the alias name LeaveType.
     * @return the LeaveType
     */
    public String getLeaveType() {
        return (String)getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LeaveType.
     * @param value value to set the LeaveType
     */
    public void setLeaveType(String value) {
        setAttributeInternal(LEAVETYPE, value);
    }

    /**
     * Gets the attribute value for FromDate, using the alias name FromDate.
     * @return the FromDate
     */
    public Date getFromDate() {
        return (Date)getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromDate.
     * @param value value to set the FromDate
     */
    public void setFromDate(Date value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for ToDate, using the alias name ToDate.
     * @return the ToDate
     */
    public Date getToDate() {
        return (Date)getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToDate.
     * @param value value to set the ToDate
     */
    public void setToDate(Date value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for Reason, using the alias name Reason.
     * @return the Reason
     */
    public String getReason() {
        return (String)getAttributeInternal(REASON);
    }

    /**
     * Sets <code>value</code> as the attribute value for Reason.
     * @param value value to set the Reason
     */
    public void setReason(String value) {
        setAttributeInternal(REASON, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for AppliedDate, using the alias name AppliedDate.
     * @return the AppliedDate
     */
    public Date getAppliedDate() {
        return (Date)getAttributeInternal(APPLIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AppliedDate.
     * @param value value to set the AppliedDate
     */
    public void setAppliedDate(Date value) {
        setAttributeInternal(APPLIEDDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity EmployeesEOImpl.
     */
    public EmployeesEOImpl getEmployeesEO() {
        return (EmployeesEOImpl)getAttributeInternal(EMPLOYEESEO);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeesEOImpl.
     */
    public void setEmployeesEO(EmployeesEOImpl value) {
        setAttributeInternal(EMPLOYEESEO, value);
    }

    /**
     * @return the associated entity EmployeesEOImpl.
     */
    public EmployeesEOImpl getEmployeesEO1() {
        return (EmployeesEOImpl)getAttributeInternal(EMPLOYEESEO1);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeesEOImpl.
     */
    public void setEmployeesEO1(EmployeesEOImpl value) {
        setAttributeInternal(EMPLOYEESEO1, value);
    }


    /**
     * @param leaveId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number leaveId) {
        return new Key(new Object[]{leaveId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl se = new SequenceImpl("LEAVESEQ",getDBTransaction());
                this.setLeaveId(se.getSequenceNumber());
                Map session = ADFContext.getCurrent().getSessionScope();
        if(session.get("employeeId")!=null){
                int myInt = Integer.parseInt(session.get("employeeId").toString());
                oracle.jbo.domain.Number n;
                n = new oracle.jbo.domain.Number(myInt);
                this.setEmployeeId(n);
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
